# -*- coding: utf-8 -*-
"""DominantColorImageDetector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-avlAJdVxiiZDv_6dACeSMMFo4qmWn0m

### **Importation of Libraries**
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
from pandas.plotting import table
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from collections import Counter
import cv2
from skimage.color import rgb2lab, deltaE_cie76
import requests
from io import BytesIO
import urllib.request
import ssl
import os

# Disable SSL certificate verification
context = ssl._create_unverified_context()

"""### **Read the images from CSV File**"""

# Read image URLs from a CSV file
df = pd.read_csv('Tweet_Images.csv')
image_urls = df['image_urls']  # Split URLs by comma and space

for i, image_url in enumerate(image_urls, 1):
    filename = f"/content/drive/MyDrive/TweetImages2/image{i}.jpg"
    try:
        urllib.request.urlretrieve(image_url, filename)
        print(f"Downloaded: image {i}")
    except urllib.error.HTTPError as e:
        if e.code == 404:
                print(f"HTTP 404 error: image {i}, URL: {image_url}")
        else:
            print(f"HTTP Error ({e.code}): image {i}, URL: {image_url}")
    except Exception as ex:
        print(f"An error occurred: image {i}, URL: {image_url}")
        print(f"Error details: {str(ex)}")

"""### **Get Dominant Colors Function**"""

# Define the function to get the dominant colors from an image URL
def get_dominant_colors(image_path, number_of_colors=25):
    image = cv2.imread(image_path)
    # Check if the image was loaded successfully
    if image is None:
        print(f"Error: Failed to read image from '{image_path}'")
        return None, None  # Return None values to indicate an error
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    modified_image = image.reshape(image.shape[0] * image.shape[1], 3)
    clf = KMeans(n_clusters=number_of_colors)
    labels = clf.fit_predict(modified_image)

    counts = Counter(labels)
    center_colors = clf.cluster_centers_
    ordered_colors = [center_colors[i] for i in counts.keys()]
    hex_colors = ["#{:02x}{:02x}{:02x}".format(int(color[0]), int(color[1]), int(color[2])) for color in ordered_colors]

    return hex_colors, counts.values()

"""### **Loop Through Image List**"""

# Loop through the image URLs and calculate colors for each image
image_folder = "/content/drive/MyDrive/TweetImages2"

# Create an empty list to store the image file paths
image_file_paths = []

# Iterate through the image files in the folder
for image_filename in sorted(os.listdir(image_folder), key=lambda x: int(x.split('image')[1].split('.')[0])):
    if image_filename.endswith(".jpg"):
        # Get the full file path by joining the folder path and the filename
        image_file_path = os.path.join(image_folder, image_filename)

        # Append the file path to the list
        image_file_paths.append(image_file_path)

# Create a list to store the results for each image
all_colors = []
all_counts = []
image_list = []

# use image_file_paths as your list of image URLs
for image_url in image_file_paths:
    print(image_url)
    if os.path.exists(image_url):
      if image_url.endswith("jpg"):
        hex_colors, counts = get_dominant_colors(image_url)
        all_colors.append(hex_colors)
        all_counts.append(counts)
        image_list.append(image_url)

    else:
      print("Path does not exist:", image_url)

"""### **Plot Results for Images**"""

# Create an empty list to store color data as tuples
color_data = []

for i, (image, hex_colors, counts) in enumerate(zip(image_list, all_colors, all_counts)):
    # Calculate the total count for the current image
    if counts is not None:
        total_count = sum(counts)
    else:
        continue

    # Sort the colors by counts in descending order
    sorted_colors = sorted(zip(hex_colors, counts), key=lambda x: -x[1])

    # Calculate the combined percentage of the top 3 colors
    top_colors = sorted_colors[:3]
    top_percentage = sum(count / total_count * 100 for _, count in top_colors)

    # Append the data to the color_data list
    color_data.append([image] + [top_percentage])

# Create a DataFrame from the color_data list
df = pd.DataFrame(color_data, columns=['Image URL', 'Top 3 Combined Percentage'])

# Print the DataFrame
display(df)